{"remainingRequest":"D:\\DayDayUp\\project\\demo\\node_modules\\thread-loader\\dist\\cjs.js!D:\\DayDayUp\\project\\demo\\node_modules\\babel-loader\\lib\\index.js!D:\\DayDayUp\\project\\demo\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\DayDayUp\\project\\demo\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\DayDayUp\\project\\demo\\node_modules\\@jiaminghi\\data-view\\lib\\components\\digitalFlop\\src\\main.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\DayDayUp\\project\\demo\\node_modules\\@jiaminghi\\data-view\\lib\\components\\digitalFlop\\src\\main.vue","mtime":499162500000},{"path":"D:\\DayDayUp\\project\\demo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DayDayUp\\project\\demo\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DayDayUp\\project\\demo\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\DayDayUp\\project\\demo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\DayDayUp\\project\\demo\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnRvLWZpeGVkIjsKaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gIkQ6XFxEYXlEYXlVcFxccHJvamVjdFxcZGVtb1xcbm9kZV9tb2R1bGVzXFxAYmFiZWxcXHJ1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheSI7Ci8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBDUmVuZGVyIGZyb20gJ0BqaWFtaW5naGkvYy1yZW5kZXInOwppbXBvcnQgJ0BqaWFtaW5naGkvY2hhcnRzL2xpYi9leHRlbmQvaW5kZXgnOwppbXBvcnQgeyBkZWVwTWVyZ2UgfSBmcm9tICdAamlhbWluZ2hpL2NoYXJ0cy9saWIvdXRpbC9pbmRleCc7CmltcG9ydCB7IGRlZXBDbG9uZSB9IGZyb20gJ0BqaWFtaW5naGkvYy1yZW5kZXIvbGliL3BsdWdpbi91dGlsJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdEdkRpZ2l0YWxGbG9wJywKICBwcm9wczogewogICAgY29uZmlnOiB7CiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7CiAgICAgICAgcmV0dXJuIHt9OwogICAgICB9CiAgICB9CiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgcmVuZGVyZXI6IG51bGwsCiAgICAgIGRlZmF1bHRDb25maWc6IHsKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gTnVtYmVyIGZvciBkaWdpdGFsIGZsb3AKICAgICAgICAgKiBAdHlwZSB7QXJyYXk8TnVtYmVyPn0KICAgICAgICAgKiBAZGVmYXVsdCBudW1iZXIgPSBbXQogICAgICAgICAqIEBleGFtcGxlIG51bWJlciA9IFsxMF0KICAgICAgICAgKi8KICAgICAgICBudW1iZXI6IFtdLAoKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ29udGVudCBmb3JtYXR0ZXIKICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICAgICAqIEBkZWZhdWx0IGNvbnRlbnQgPSAnJwogICAgICAgICAqIEBleGFtcGxlIGNvbnRlbnQgPSAne250feS4qicKICAgICAgICAgKi8KICAgICAgICBjb250ZW50OiAnJywKCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIE51bWJlciB0b0ZpeGVkCiAgICAgICAgICogQHR5cGUge051bWJlcn0KICAgICAgICAgKiBAZGVmYXVsdCB0b0ZpeGVkID0gMAogICAgICAgICAqLwogICAgICAgIHRvRml4ZWQ6IDAsCgogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBUZXh0IGFsaWduCiAgICAgICAgICogQHR5cGUge1N0cmluZ30KICAgICAgICAgKiBAZGVmYXVsdCB0ZXh0QWxpZ24gPSAnY2VudGVyJwogICAgICAgICAqIEBleGFtcGxlIHRleHRBbGlnbiA9ICdjZW50ZXInIHwgJ2xlZnQnIHwgJ3JpZ2h0JwogICAgICAgICAqLwogICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsCgogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBUZXh0IHN0eWxlIGNvbmZpZ3VyYXRpb24KICAgICAgICAgKiBAdHlwZSB7T2JqZWN0fSB7Q1JlbmRlciBDbGFzcyBTdHlsZX0KICAgICAgICAgKi8KICAgICAgICBzdHlsZTogewogICAgICAgICAgZm9udFNpemU6IDMwLAogICAgICAgICAgZmlsbDogJyMzZGU3YzknCiAgICAgICAgfSwKCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIENSZW5kZXIgYW5pbWF0aW9uQ3VydmUKICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICAgICAqIEBkZWZhdWx0IGFuaW1hdGlvbkN1cnZlID0gJ2Vhc2VPdXRDdWJpYycKICAgICAgICAgKi8KICAgICAgICBhbmltYXRpb25DdXJ2ZTogJ2Vhc2VPdXRDdWJpYycsCgogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBDUmVuZGVyIGFuaW1hdGlvbkZyYW1lCiAgICAgICAgICogQHR5cGUge1N0cmluZ30KICAgICAgICAgKiBAZGVmYXVsdCBhbmltYXRpb25GcmFtZSA9IDUwCiAgICAgICAgICovCiAgICAgICAgYW5pbWF0aW9uRnJhbWU6IDUwCiAgICAgIH0sCiAgICAgIG1lcmdlZENvbmZpZzogbnVsbCwKICAgICAgZ3JhcGg6IG51bGwKICAgIH07CiAgfSwKICB3YXRjaDogewogICAgY29uZmlnOiBmdW5jdGlvbiBjb25maWcoKSB7CiAgICAgIHZhciB1cGRhdGUgPSB0aGlzLnVwZGF0ZTsKICAgICAgdXBkYXRlKCk7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkgewogICAgICB2YXIgaW5pdFJlbmRlciA9IHRoaXMuaW5pdFJlbmRlciwKICAgICAgICAgIG1lcmdlQ29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZywKICAgICAgICAgIGluaXRHcmFwaCA9IHRoaXMuaW5pdEdyYXBoOwogICAgICBpbml0UmVuZGVyKCk7CiAgICAgIG1lcmdlQ29uZmlnKCk7CiAgICAgIGluaXRHcmFwaCgpOwogICAgfSwKICAgIGluaXRSZW5kZXI6IGZ1bmN0aW9uIGluaXRSZW5kZXIoKSB7CiAgICAgIHZhciAkcmVmcyA9IHRoaXMuJHJlZnM7CiAgICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgQ1JlbmRlcigkcmVmc1snZGlnaXRhbC1mbG9wJ10pOwogICAgfSwKICAgIG1lcmdlQ29uZmlnOiBmdW5jdGlvbiBtZXJnZUNvbmZpZygpIHsKICAgICAgdmFyIGRlZmF1bHRDb25maWcgPSB0aGlzLmRlZmF1bHRDb25maWcsCiAgICAgICAgICBjb25maWcgPSB0aGlzLmNvbmZpZzsKICAgICAgdGhpcy5tZXJnZWRDb25maWcgPSBkZWVwTWVyZ2UoZGVlcENsb25lKGRlZmF1bHRDb25maWcsIHRydWUpLCBjb25maWcgfHwge30pOwogICAgfSwKICAgIGluaXRHcmFwaDogZnVuY3Rpb24gaW5pdEdyYXBoKCkgewogICAgICB2YXIgZ2V0U2hhcGUgPSB0aGlzLmdldFNoYXBlLAogICAgICAgICAgZ2V0U3R5bGUgPSB0aGlzLmdldFN0eWxlLAogICAgICAgICAgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyLAogICAgICAgICAgbWVyZ2VkQ29uZmlnID0gdGhpcy5tZXJnZWRDb25maWc7CiAgICAgIHZhciBhbmltYXRpb25DdXJ2ZSA9IG1lcmdlZENvbmZpZy5hbmltYXRpb25DdXJ2ZSwKICAgICAgICAgIGFuaW1hdGlvbkZyYW1lID0gbWVyZ2VkQ29uZmlnLmFuaW1hdGlvbkZyYW1lOwogICAgICB2YXIgc2hhcGUgPSBnZXRTaGFwZSgpOwogICAgICB2YXIgc3R5bGUgPSBnZXRTdHlsZSgpOwogICAgICB0aGlzLmdyYXBoID0gcmVuZGVyZXIuYWRkKHsKICAgICAgICBuYW1lOiAnbnVtYmVyVGV4dCcsCiAgICAgICAgYW5pbWF0aW9uQ3VydmU6IGFuaW1hdGlvbkN1cnZlLAogICAgICAgIGFuaW1hdGlvbkZyYW1lOiBhbmltYXRpb25GcmFtZSwKICAgICAgICBzaGFwZTogc2hhcGUsCiAgICAgICAgc3R5bGU6IHN0eWxlCiAgICAgIH0pOwogICAgfSwKICAgIGdldFNoYXBlOiBmdW5jdGlvbiBnZXRTaGFwZSgpIHsKICAgICAgdmFyIF90aGlzJG1lcmdlZENvbmZpZyA9IHRoaXMubWVyZ2VkQ29uZmlnLAogICAgICAgICAgbnVtYmVyID0gX3RoaXMkbWVyZ2VkQ29uZmlnLm51bWJlciwKICAgICAgICAgIGNvbnRlbnQgPSBfdGhpcyRtZXJnZWRDb25maWcuY29udGVudCwKICAgICAgICAgIHRvRml4ZWQgPSBfdGhpcyRtZXJnZWRDb25maWcudG9GaXhlZCwKICAgICAgICAgIHRleHRBbGlnbiA9IF90aGlzJG1lcmdlZENvbmZpZy50ZXh0QWxpZ247CgogICAgICB2YXIgX3RoaXMkcmVuZGVyZXIkYXJlYSA9IF9zbGljZWRUb0FycmF5KHRoaXMucmVuZGVyZXIuYXJlYSwgMiksCiAgICAgICAgICB3ID0gX3RoaXMkcmVuZGVyZXIkYXJlYVswXSwKICAgICAgICAgIGggPSBfdGhpcyRyZW5kZXJlciRhcmVhWzFdOwoKICAgICAgdmFyIHBvc2l0aW9uID0gW3cgLyAyLCBoIC8gMl07CiAgICAgIGlmICh0ZXh0QWxpZ24gPT09ICdsZWZ0JykgcG9zaXRpb25bMF0gPSAwOwogICAgICBpZiAodGV4dEFsaWduID09PSAncmlnaHQnKSBwb3NpdGlvblswXSA9IHc7CiAgICAgIHJldHVybiB7CiAgICAgICAgbnVtYmVyOiBudW1iZXIsCiAgICAgICAgY29udGVudDogY29udGVudCwKICAgICAgICB0b0ZpeGVkOiB0b0ZpeGVkLAogICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvbgogICAgICB9OwogICAgfSwKICAgIGdldFN0eWxlOiBmdW5jdGlvbiBnZXRTdHlsZSgpIHsKICAgICAgdmFyIF90aGlzJG1lcmdlZENvbmZpZzIgPSB0aGlzLm1lcmdlZENvbmZpZywKICAgICAgICAgIHN0eWxlID0gX3RoaXMkbWVyZ2VkQ29uZmlnMi5zdHlsZSwKICAgICAgICAgIHRleHRBbGlnbiA9IF90aGlzJG1lcmdlZENvbmZpZzIudGV4dEFsaWduOwogICAgICByZXR1cm4gZGVlcE1lcmdlKHN0eWxlLCB7CiAgICAgICAgdGV4dEFsaWduOiB0ZXh0QWxpZ24sCiAgICAgICAgdGV4dEJhc2VsaW5lOiAnbWlkZGxlJwogICAgICB9KTsKICAgIH0sCiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSgpIHsKICAgICAgdmFyIG1lcmdlQ29uZmlnID0gdGhpcy5tZXJnZUNvbmZpZywKICAgICAgICAgIG1lcmdlU2hhcGUgPSB0aGlzLm1lcmdlU2hhcGUsCiAgICAgICAgICBnZXRTaGFwZSA9IHRoaXMuZ2V0U2hhcGUsCiAgICAgICAgICBnZXRTdHlsZSA9IHRoaXMuZ2V0U3R5bGUsCiAgICAgICAgICBncmFwaCA9IHRoaXMuZ3JhcGgsCiAgICAgICAgICBtZXJnZWRDb25maWcgPSB0aGlzLm1lcmdlZENvbmZpZzsKICAgICAgZ3JhcGguYW5pbWF0aW9uRW5kKCk7CiAgICAgIG1lcmdlQ29uZmlnKCk7CiAgICAgIGlmICghZ3JhcGgpIHJldHVybjsKICAgICAgdmFyIGFuaW1hdGlvbkN1cnZlID0gbWVyZ2VkQ29uZmlnLmFuaW1hdGlvbkN1cnZlLAogICAgICAgICAgYW5pbWF0aW9uRnJhbWUgPSBtZXJnZWRDb25maWcuYW5pbWF0aW9uRnJhbWU7CiAgICAgIHZhciBzaGFwZSA9IGdldFNoYXBlKCk7CiAgICAgIHZhciBzdHlsZSA9IGdldFN0eWxlKCk7CiAgICAgIG1lcmdlU2hhcGUoZ3JhcGgsIHNoYXBlKTsKICAgICAgZ3JhcGguYW5pbWF0aW9uQ3VydmUgPSBhbmltYXRpb25DdXJ2ZTsKICAgICAgZ3JhcGguYW5pbWF0aW9uRnJhbWUgPSBhbmltYXRpb25GcmFtZTsKICAgICAgZ3JhcGguYW5pbWF0aW9uKCdzdHlsZScsIHN0eWxlLCB0cnVlKTsKICAgICAgZ3JhcGguYW5pbWF0aW9uKCdzaGFwZScsIHNoYXBlKTsKICAgIH0sCiAgICBtZXJnZVNoYXBlOiBmdW5jdGlvbiBtZXJnZVNoYXBlKGdyYXBoLCBzaGFwZSkgewogICAgICB2YXIgY2FjaGVOdW0gPSBncmFwaC5zaGFwZS5udW1iZXIubGVuZ3RoOwogICAgICB2YXIgc2hhcGVOdW0gPSBzaGFwZS5udW1iZXIubGVuZ3RoOwogICAgICBpZiAoY2FjaGVOdW0gIT09IHNoYXBlTnVtKSBncmFwaC5zaGFwZS5udW1iZXIgPSBzaGFwZS5udW1iZXI7CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIGluaXQgPSB0aGlzLmluaXQ7CiAgICBpbml0KCk7CiAgfQp9Ow=="},{"version":3,"sources":["main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"dv-digital-flop\">\n    <canvas ref=\"digital-flop\" />\n  </div>\n</template>\n\n<script>\nimport CRender from '@jiaminghi/c-render'\n\nimport '@jiaminghi/charts/lib/extend/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvDigitalFlop',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      renderer: null,\n\n      defaultConfig: {\n        /**\n         * @description Number for digital flop\n         * @type {Array<Number>}\n         * @default number = []\n         * @example number = [10]\n         */\n        number: [],\n        /**\n         * @description Content formatter\n         * @type {String}\n         * @default content = ''\n         * @example content = '{nt}个'\n         */\n        content: '',\n        /**\n         * @description Number toFixed\n         * @type {Number}\n         * @default toFixed = 0\n         */\n        toFixed: 0,\n        /**\n         * @description Text align\n         * @type {String}\n         * @default textAlign = 'center'\n         * @example textAlign = 'center' | 'left' | 'right'\n         */\n        textAlign: 'center',\n        /**\n         * @description Text style configuration\n         * @type {Object} {CRender Class Style}\n         */\n        style: {\n          fontSize: 30,\n          fill: '#3de7c9'\n        },\n        /**\n         * @description CRender animationCurve\n         * @type {String}\n         * @default animationCurve = 'easeOutCubic'\n         */\n        animationCurve: 'easeOutCubic',\n        /**\n         * @description CRender animationFrame\n         * @type {String}\n         * @default animationFrame = 50\n         */\n        animationFrame: 50\n      },\n\n      mergedConfig: null,\n\n      graph: null\n    }\n  },\n  watch: {\n    config () {\n      const { update } = this\n\n      update()\n    }\n  },\n  methods: {\n    init () {\n      const { initRender, mergeConfig, initGraph } = this\n\n      initRender()\n\n      mergeConfig()\n\n      initGraph()\n    },\n    initRender () {\n      const { $refs } = this\n\n      this.renderer = new CRender($refs['digital-flop'])\n    },\n    mergeConfig () {\n      const { defaultConfig, config } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    initGraph () {\n      const { getShape, getStyle, renderer, mergedConfig } = this\n\n      const { animationCurve, animationFrame } = mergedConfig\n\n      const shape = getShape()\n      const style = getStyle()\n\n      this.graph = renderer.add({\n        name: 'numberText',\n        animationCurve,\n        animationFrame,\n        shape,\n        style\n      })\n    },\n    getShape () {\n      const { number, content, toFixed, textAlign } = this.mergedConfig\n\n      const [w, h] = this.renderer.area\n\n      const position = [w / 2, h / 2]\n\n      if (textAlign === 'left') position[0] = 0\n      if (textAlign === 'right') position[0] = w\n\n      return {\n        number,\n        content,\n        toFixed,\n        position\n      }\n    },\n    getStyle () {\n      const { style, textAlign } = this.mergedConfig\n\n      return deepMerge(style, {\n        textAlign,\n        textBaseline: 'middle'\n      })\n    },\n    update () {\n      const { mergeConfig, mergeShape, getShape, getStyle, graph, mergedConfig } = this\n\n      graph.animationEnd()\n\n      mergeConfig()\n\n      if (!graph) return\n\n      const { animationCurve, animationFrame } = mergedConfig\n\n      const shape = getShape()\n      const style = getStyle()\n\n      mergeShape(graph, shape)\n\n      graph.animationCurve = animationCurve\n      graph.animationFrame = animationFrame\n\n      graph.animation('style', style, true)\n      graph.animation('shape', shape)\n    },\n    mergeShape (graph, shape) {\n      const cacheNum = graph.shape.number.length\n      const shapeNum = shape.number.length\n\n      if (cacheNum !== shapeNum) graph.shape.number = shape.number\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  }\n}\n</script>"],"sourceRoot":"node_modules/@jiaminghi/data-view/lib/components/digitalFlop/src"}]}